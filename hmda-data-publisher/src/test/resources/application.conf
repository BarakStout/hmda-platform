akka {
  log-level = INFO
  http.server.preview.enable-http2 = on
  http.server.request-timeout=20800s
  //  //2018 Data Publisher Schedules
  //  PanelScheduler2018 = """akka.quartz.schedules.PanelScheduler2018.expression = "0 0 17 ? * SUN *""""
  //  LarScheduler2018 = """akka.quartz.schedules.LARScheduler2018.expression = "0 0 16 ? * SUN *""""
  //  TsScheduler2018 = """akka.quartz.schedules.TsScheduler2018.expression = "0 0 18 ? * SUN *""""
  //  //2019 Publisher Schedules
  //  PanelScheduler2019 = "akka.quartz.schedules.PanelScheduler2019.expression, 0 45 19 ? APR THU *"
  //  LarScheduler2019 = "akka.quartz.schedules.LARScheduler2019.expression, 0 0 20 ? APR THU *"
  //  TsScheduler2019 = "akka.quartz.schedules.TsScheduler2019.expression, 0 0 21 ? APR THU *"
  //  //2018 Public Dynamic Data Schedules
  //  PanelPublicScheduler2018 = """akka.quartz.schedules.PanelPublicScheduler2018.expression = "0 00 20 ? * SUN *""""
  //  LarPublicScheduler2018 = """akka.quartz.schedules.LarPublicScheduler2018.expression = "0 0 22 ? * SUN *""""
  //  TsPublicScheduler2018 = """akka.quartz.schedules.TsPublicScheduler2018.expression = "0 0 21 ? * SUN *""""

  //Prod Schedules
  //i.e. PANEL_SCHEDULE="0 20 18 * * ?" trigger at 6:20PM everyday
  //i.e. LAR_SCHEDULE="0 56 03 * * ?" trigger at 3:56AM everyday
  //i.e. TS_SCHEDULE="0 30 00 * * ?" trigger at 12:30AM everyday
  PanelScheduler2018 = "akka.quartz.schedules.PanelScheduler2018.expression = 0 30 00 * * ?"
  LarScheduler2018 = "akka.quartz.schedules.LARScheduler2018.expression = 0 30 00 * * ?"
  TsScheduler2018 = "akka.quartz.schedules.TsScheduler2018.expression = 0 30 00 * * ?"

  //2019 Publisher Schedules
  PanelScheduler2019 = "akka.quartz.schedules.PanelScheduler2019.expression,0 30 00 * * ?"
  LarScheduler2019 = "akka.quartz.schedules.LARScheduler2019.expression,0 30 00 * * ?"
  LarSchedulerLoanLimit2019 = "akka.quartz.schedules.LARSchedulerLoanLimit2019.expression,0 30 00 * * ?"
  TsScheduler2019 = "akka.quartz.schedules.TsScheduler2019.expression,0 30 00 * * ?"

  //2018 Public Dynamic Data Schedules
  PanelPublicScheduler2018 = "akka.quartz.schedules.PanelPublicScheduler2018.expression = 0 30 00 * * ?"
  LarPublicScheduler2018 = "akka.quartz.schedules.LarPublicScheduler2018.expression = 0 30 00 * * ?"
  TsPublicScheduler2018 = "akka.quartz.schedules.TsPublicScheduler2018.expression = 0 30 00 * * ?"

  //2020 Public Dynamic Data Schedules
  LarSchedulerQuarterly2020 = "akka.quartz.schedules.LarSchedulerQuarterly2020.expression,0 30 00 * * ?"
  TsSchedulerQuarterly2020 = "akka.quartz.schedules.TsSchedulerQuarterly2020.expression,0 30 00 * * ?"
}


hmda {
  regulator {
    http {
      createSchema = false
      createSchema = ${?REGULATOR_PG_CREATE_SCHEMA}
      timeout = 3
      host = "0.0.0.0"
      host = ${?HTTP_REGULATOR_HOST}
      port = "9099"
      port = ${?HTTP_REGULATOR_PORT}
      timeout = 10
    }
    grpc {
      host = "0.0.0.0"
      host = ${?GRPC_REGULATOR_HOST}
      port = 60082
      port = ${?GRPC_REGULATOR_PORT}
    }
  }
}

private-aws {
  private-access-key-id = "dev"
  private-secret-access-key = "dev"
  private-environment = "dev"
  private-s3-bucket = "cfpb-hmda-export"
  private-region = "us-east-1"
  private-year ="2018"
}

public-aws {
  public-access-key-id = "dev"
  public-secret-access-key = "dev"
  public-environment = "dev"
  public-s3-bucket = "cfpb-hmda-public"
  public-region = "us-east-1"
  public-year ="2018"
}

filter {
  bank-filter-list="BANK1LEIFORTEST12345,BANK3LEIFORTEST12345,BANK4LEIFORTEST12345,999999LE3ZOZXUS7W648,28133080042813308004,B90YWS6AFX2LGWOXJ1LD"
}

embedded-pg {
  profile = "slick.jdbc.PostgresProfile$"

  db {
    profile = slick.jdbc.PostgresProfile
    url = "jdbc:postgresql://localhost:5432/postgres?user=postgres&password=postgres"
    numThreads = 2
    queueSize = 10
    connectionTimeout = 20000
    validationTimeout = 10000
  }
}