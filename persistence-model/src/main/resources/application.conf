akka {
  loglevel = "INFO"
  actor {
    warn-about-java-serializer-usage = on
    serializers {
      institution = "hmda.persistence.serialization.institutions.InstitutionProtobufSerializer"
      submission = "hmda.persistence.serialization.submission.SubmissionProtobufSerializer"
      filing = "hmda.persistence.serialization.filing.FilingProtobufSerializer"
      parser = "hmda.persistence.serialization.parser.HmdaFileParserProtobufSerializer"
      larValidated = "hmda.persistence.serialization.validation.LarValidatedProtobufSerializer"
      upload = "hmda.persistence.serialization.upload.UploadProtobufSerializer"
      larStats = "hmda.persistence.serialization.validation.SubmissionLarStatsProtobufSerializer"
    }
    serialization-bindings {
      "hmda.persistence.messages.events.institutions.InstitutionEvents$InstitutionCreated" = institution
      "hmda.persistence.messages.events.institutions.InstitutionEvents$InstitutionModified" = institution
      "hmda.persistence.messages.events.institutions.FilingEvents$FilingCreated" = filing
      "hmda.persistence.messages.events.institutions.FilingEvents$FilingStatusUpdated" = filing
      "hmda.persistence.messages.events.institutions.SubmissionEvents$SubmissionCreated" = submission
      "hmda.persistence.messages.events.institutions.SubmissionEvents$SubmissionStatusUpdated" = submission
      "hmda.persistence.messages.events.processing.CommonHmdaValidatorEvents$LarValidated" = larValidated
      "hmda.persistence.messages.events.processing.FileUploadEvents$LineAdded" = upload
      "hmda.persistence.messages.events.processing.FileUploadEvents$FileNameAdded" = upload
      "hmda.persistence.messages.events.processing.HmdaFileParserEvents$TsParsed" = parser
      "hmda.persistence.messages.events.processing.HmdaFileParserEvents$TsParsedErrors" = parser
      "hmda.persistence.messages.events.processing.HmdaFileParserEvents$LarParsed" = parser
      "hmda.persistence.messages.events.processing.HmdaFileParserEvents$LarParsedErrors" = parser
      "hmda.persistence.messages.events.validation.SubmissionLarStatsEvents$SubmittedLarsUpdated" = larStats
      "hmda.persistence.messages.events.validation.SubmissionLarStatsEvents$MacroStatsUpdated" = larStats
    }
  }
  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
    query {
      journal.id = "cassandra-query-journal"
    }
  }
}

cassandra-journal {
  contact-points = ["127.0.0.1"]
  contact-points = [${?CASSANDRA_CLUSTER_HOSTS}]
  keyspace = "hmda_journal"
  table = "journal"
  keyspace-autocreate = true
  keyspace-autocreate-retries = 5
  connect-retries = 10
  connect-retry-delay = 5s
}

cassandra-snapshot-store {
  contact-points = ["127.0.0.1"]
  contact-points = [${?CASSANDRA_CLUSTER_HOSTS}]
  keyspace = "hmda_snapshot"
  table = "snapshot"
  keyspace-autocreate = true
  keyspace-autocreate-retries = 5
  connect-retries = 10
  connect-retry-delay = 5s
}

cassandra-query-journal {
  refresh-interval = 5s
  refresh-interval = ${?QUERY_JOURNAL_REFRESH_INTERVAL}
}

hmda {
  actor-lookup-timeout = 5
  persistent-actor-timeout = 60
  isDemo = true
  isDemo = ${?HMDA_IS_DEMO}
}
