akka {
  actor {
    deployment {
      /supervisor/larValidation {
        dispatcher = persistence-dispatcher
      }
    }
  }
  quartz {
    defaultTimezone = "EST"
    threadPool.threadCount = 2
    schedules {
      AporCalculator {
        description = "Retrieve APOR tables from S3 on a schedule"
        //expression = "*/30 * * ? * *"
        expression = "0 0 23 ? * THU"
      }
    }
  }
}


hmda {
  actor {
    timeout = 5
  }
  actor-flow-parallelism = 4
  edits.demoMode = false
  edits.demoMode = ${?EDITS_DEMO_MODE}
  journal.snapshot.counter = 1000
  persistence {
    aws {
      access-key-id = ""
      access-key-id = ${?AWS_ACCESS_KEY_ID}
      secret-access-key = ""
      secret-access-key = ${?AWS_SECRET_ACCESS_KEY}
      environment = "dev" //change to "prod" for production S3 bucket
      environment = ${?AWS_ENVIRONMENT}
      public-bucket = "cfpb-hmda-public"
      public-bucket = ${?S3_PUBLIC_BUCKET}
      private-bucket = "cfpb-hmda-export"
      private-bucket = ${?S3_PRIVATE_BUCKET}
      region = "us-east-1"
      region = ${?AWS_REGION}
    }
  }
  apor {
    fixed.rate.fileName = "YieldTableFixed.txt"
    fixed.rate.fileName = ${?APOR_FIXED_FILENAME}
    variable.rate.fileName = "YieldTableAdjustable.txt"
    variable.rate.fileName = ${?APOR_VARIABLE_FILENAME}
  }
}

persistence-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}
